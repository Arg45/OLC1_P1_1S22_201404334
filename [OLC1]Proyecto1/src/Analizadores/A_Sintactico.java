
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import Proyecto1.Index;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\015\004\000\002\015\003\000\002\006\011\000\002" +
    "\021\005\000\002\021\005\000\002\021\003\000\002\021" +
    "\003\000\002\022\004\000\002\022\003\000\002\012\004" +
    "\000\002\012\003\000\002\023\004\000\002\023\003\000" +
    "\002\013\004\000\002\013\003\000\002\016\004\000\002" +
    "\016\003\000\002\007\007\000\002\024\004\000\002\024" +
    "\003\000\002\010\004\000\002\010\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\005\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\017\005\000\002\025" +
    "\004\000\002\025\003\000\002\011\006\000\002\020\003" +
    "\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\004\007\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\006\002\000\004\007\001\002\000\004" +
    "\002\111\001\002\000\014\026\015\035\020\040\022\042" +
    "\016\043\021\001\002\000\006\005\uffe8\040\uffe8\001\002" +
    "\000\006\005\ufff7\035\ufff7\001\002\000\004\005\ufff9\001" +
    "\002\000\004\005\ufffa\001\002\000\004\005\110\001\002" +
    "\000\004\026\100\001\002\000\004\005\uffd5\001\002\000" +
    "\006\005\ufffc\035\020\001\002\000\004\015\055\001\002" +
    "\000\004\005\uffd4\001\002\000\004\021\025\001\002\000" +
    "\006\005\ufffb\040\022\001\002\000\006\005\uffe9\040\uffe9" +
    "\001\002\000\004\011\026\001\002\000\024\004\035\012" +
    "\031\017\036\020\034\022\033\025\042\036\030\037\032" +
    "\041\027\001\002\000\026\004\uffdc\012\uffdc\014\uffdc\017" +
    "\uffdc\020\uffdc\022\uffdc\025\uffdc\036\uffdc\037\uffdc\041\uffdc" +
    "\001\002\000\030\004\uffee\012\uffee\013\054\014\uffee\017" +
    "\uffee\020\uffee\022\uffee\025\uffee\036\uffee\037\uffee\041\uffee" +
    "\001\002\000\026\004\uffe2\012\uffe2\014\uffe2\017\uffe2\020" +
    "\uffe2\022\uffe2\025\uffe2\036\uffe2\037\uffe2\041\uffe2\001\002" +
    "\000\030\004\uffea\012\uffea\013\053\014\uffea\017\uffea\020" +
    "\uffea\022\uffea\025\uffea\036\uffea\037\uffea\041\uffea\001\002" +
    "\000\026\004\uffe0\012\uffe0\014\uffe0\017\uffe0\020\uffe0\022" +
    "\uffe0\025\uffe0\036\uffe0\037\uffe0\041\uffe0\001\002\000\026" +
    "\004\uffe1\012\uffe1\014\uffe1\017\uffe1\020\uffe1\022\uffe1\025" +
    "\uffe1\036\uffe1\037\uffe1\041\uffe1\001\002\000\006\036\051" +
    "\037\047\001\002\000\026\004\uffde\012\uffde\014\uffde\017" +
    "\uffde\020\uffde\022\uffde\025\uffde\036\uffde\037\uffde\041\uffde" +
    "\001\002\000\026\004\uffe3\012\uffe3\014\uffe3\017\uffe3\020" +
    "\uffe3\022\uffe3\025\uffe3\036\uffe3\037\uffe3\041\uffe3\001\002" +
    "\000\010\004\035\037\032\041\027\001\002\000\026\004" +
    "\035\012\031\014\044\017\036\020\034\022\033\025\042" +
    "\036\030\037\032\041\027\001\002\000\026\004\uffdf\012" +
    "\uffdf\014\uffdf\017\uffdf\020\uffdf\022\uffdf\025\uffdf\036\uffdf" +
    "\037\uffdf\041\uffdf\001\002\000\026\004\uffe5\012\uffe5\014" +
    "\uffe5\017\uffe5\020\uffe5\022\uffe5\025\uffe5\036\uffe5\037\uffe5" +
    "\041\uffe5\001\002\000\006\005\uffe7\040\uffe7\001\002\000" +
    "\026\004\uffe6\012\uffe6\014\uffe6\017\uffe6\020\uffe6\022\uffe6" +
    "\025\uffe6\036\uffe6\037\uffe6\041\uffe6\001\002\000\026\004" +
    "\uffe4\012\uffe4\014\uffe4\017\uffe4\020\uffe4\022\uffe4\025\uffe4" +
    "\036\uffe4\037\uffe4\041\uffe4\001\002\000\004\005\uffda\001" +
    "\002\000\004\005\052\001\002\000\004\005\uffdb\001\002" +
    "\000\026\004\uffdd\012\uffdd\014\uffdd\017\uffdd\020\uffdd\022" +
    "\uffdd\025\uffdd\036\uffdd\037\uffdd\041\uffdd\001\002\000\026" +
    "\004\uffeb\012\uffeb\014\uffeb\017\uffeb\020\uffeb\022\uffeb\025" +
    "\uffeb\036\uffeb\037\uffeb\041\uffeb\001\002\000\026\004\uffef" +
    "\012\uffef\014\uffef\017\uffef\020\uffef\022\uffef\025\uffef\036" +
    "\uffef\037\uffef\041\uffef\001\002\000\004\040\056\001\002" +
    "\000\004\021\057\001\002\000\004\011\060\001\002\000" +
    "\024\004\035\012\031\017\036\020\034\022\033\025\042" +
    "\036\061\037\064\041\027\001\002\000\024\012\uffee\013" +
    "\054\014\uffee\017\uffee\020\uffee\022\uffee\025\uffee\027\075" +
    "\036\uffee\001\002\000\004\014\074\001\002\000\020\012" +
    "\031\014\ufff3\017\036\020\034\022\033\025\042\036\030" +
    "\001\002\000\016\004\uffea\013\053\014\uffea\027\071\037" +
    "\uffea\041\uffea\001\002\000\012\004\035\014\ufff2\037\032" +
    "\041\027\001\002\000\012\004\uffec\014\uffec\037\uffec\041" +
    "\uffec\001\002\000\020\012\ufff0\014\ufff0\017\ufff0\020\ufff0" +
    "\022\ufff0\025\ufff0\036\ufff0\001\002\000\012\004\uffed\014" +
    "\uffed\037\uffed\041\uffed\001\002\000\004\037\072\001\002" +
    "\000\004\014\ufff5\001\002\000\020\012\ufff1\014\ufff1\017" +
    "\ufff1\020\ufff1\022\ufff1\025\ufff1\036\ufff1\001\002\000\006" +
    "\005\ufff6\035\ufff6\001\002\000\004\036\076\001\002\000" +
    "\004\014\ufff4\001\002\000\006\005\ufff8\035\ufff8\001\002" +
    "\000\004\040\101\001\002\000\004\015\105\001\002\000" +
    "\006\005\uffd7\040\uffd7\001\002\000\006\005\uffd9\040\101" +
    "\001\002\000\006\005\uffd8\040\uffd8\001\002\000\004\041" +
    "\106\001\002\000\004\014\107\001\002\000\006\005\uffd6" +
    "\040\uffd6\001\002\000\006\002\ufffd\004\ufffd\001\002\000" +
    "\004\002\001\001\002\000\006\002\uffff\004\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\010\002\005\003\004\004\003\001\001\000" +
    "\002\001\001\000\004\004\111\001\001\000\002\001\001" +
    "\000\020\005\013\006\010\007\007\015\016\016\022\017" +
    "\012\020\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\042\012\037\013\036\024\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\045\001\001\000\010\010\044\012\037\013\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\066\013\065\021\061" +
    "\022\062\023\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\072\001\001\000\002\001\001\000\004" +
    "\013\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\101\025\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        Index i = new Index();
        public String resultado = "";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_Sintactico$actions {

  
  private final A_Sintactico parser;

  /** Constructor */
  CUP$A_Sintactico$actions(A_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action_part00000000(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_Sintactico$parser.done_parsing();
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 parser.resultado=a; System.out.println(a); i.txt_salida.setText(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= LLAVE_A B LLAVE_C 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = " { "+ b.toString() +" } "; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // B ::= definirconjuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= definirexpresionregular 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= dobleporciento 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= comentarios 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definirconjuntos ::= definirconjuntos C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirconjuntos",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definirconjuntos ::= C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirconjuntos",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // C ::= CONJUNTO DOSPUNTOS ID MENOS MAYOR notacionconjuntos PUNTOYCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString()+g.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // notacionconjuntos ::= LETRA COSO_N LETRA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",15, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // notacionconjuntos ::= DIGITO COSO_N DIGITO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",15, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // notacionconjuntos ::= listanumeros 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",15, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // notacionconjuntos ::= listaletras 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",15, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listanumeros ::= listanumeros G 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("listanumeros",16, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listanumeros ::= G 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("listanumeros",16, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // G ::= DIGITO COMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // G ::= DIGITO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listaletras ::= listaletras H 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("listaletras",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaletras ::= H 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("listaletras",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // H ::= LETRA COMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // H ::= LETRA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // definirexpresionregular ::= definirexpresionregular D 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirexpresionregular",12, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // definirexpresionregular ::= D 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirexpresionregular",12, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // D ::= ID MENOS MAYOR er PUNTOYCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString()+d.toString()+e.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("D",5, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // er ::= er E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("er",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // er ::= E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("er",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= G H 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= H 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // G ::= PUNTO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // G ::= MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // G ::= POR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // G ::= OR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // G ::= INTE_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // H ::= LLAVE_A I LLAVE_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // H ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // I ::= DIGITO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // I ::= LETRA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dobleporciento ::= DPORCIENTO DPORCIENTO expresionregularaevaluar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("dobleporciento",13, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresionregularaevaluar ::= expresionregularaevaluar F 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("expresionregularaevaluar",19, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresionregularaevaluar ::= F 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("expresionregularaevaluar",19, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // F ::= ID DOSPUNTOS CADENA PUNTOYCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comentarios ::= COMENTARIO_LINEA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",14, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comentarios ::= COMENTARIO_VARIASL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",14, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_Sintactico$do_action_part00000000(
                               CUP$A_Sintactico$act_num,
                               CUP$A_Sintactico$parser,
                               CUP$A_Sintactico$stack,
                               CUP$A_Sintactico$top);
    }
}

}
