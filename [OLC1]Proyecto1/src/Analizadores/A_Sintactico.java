
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\014\004\000\002\014\003\000\002\006\011\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\020" +
    "\003\000\002\021\004\000\002\021\003\000\002\012\004" +
    "\000\002\012\003\000\002\022\004\000\002\022\003\000" +
    "\002\013\004\000\002\013\003\000\002\015\004\000\002" +
    "\015\003\000\002\007\007\000\002\023\004\000\002\023" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\016" +
    "\003\000\002\024\004\000\002\024\003\000\002\011\006" +
    "\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\004\004\007\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\006\002\000\004\007\001\002\000\004" +
    "\002\106\001\002\000\012\035\021\040\022\042\017\043" +
    "\020\001\002\000\006\005\uffe8\040\uffe8\001\002\000\006" +
    "\005\ufff7\035\ufff7\001\002\000\004\005\ufff9\001\002\000" +
    "\004\005\ufffa\001\002\000\004\005\105\001\002\000\006" +
    "\005\uffd8\040\103\001\002\000\006\005\ufffc\035\021\001" +
    "\002\000\004\005\uffd4\001\002\000\004\005\uffd3\001\002" +
    "\000\004\015\054\001\002\000\006\015\051\021\027\001" +
    "\002\000\006\005\ufffb\040\025\001\002\000\006\005\uffd6" +
    "\040\uffd6\001\002\000\004\021\027\001\002\000\006\005" +
    "\uffe9\040\uffe9\001\002\000\004\011\030\001\002\000\032" +
    "\004\037\005\035\006\040\007\042\012\032\017\043\020" +
    "\036\022\034\025\045\036\031\037\033\040\041\001\002" +
    "\000\034\004\uffdb\005\uffdb\006\uffdb\007\uffdb\012\uffdb\014" +
    "\uffdb\017\uffdb\020\uffdb\022\uffdb\025\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\001\002\000\034\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\012\uffe0\014\uffe0\017\uffe0\020\uffe0\022\uffe0\025\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\001\002\000\034\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\012\uffda\014\uffda\017\uffda\020\uffda" +
    "\022\uffda\025\uffda\036\uffda\037\uffda\040\uffda\001\002\000" +
    "\034\004\uffdd\005\uffdd\006\uffdd\007\uffdd\012\uffdd\014\uffdd" +
    "\017\uffdd\020\uffdd\022\uffdd\025\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\001\002\000\034\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\012\uffe3\014\uffe3\017\uffe3\020\uffe3\022\uffe3\025\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\001\002\000\034\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\012\uffde\014\uffde\017\uffde\020\uffde\022" +
    "\uffde\025\uffde\036\uffde\037\uffde\040\uffde\001\002\000\034" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\012\uffe4\014\uffe4\017" +
    "\uffe4\020\uffe4\022\uffe4\025\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\001\002\000\034\004\uffe2\005\uffe2\006\uffe2\007\uffe2\012" +
    "\uffe2\014\uffe2\017\uffe2\020\uffe2\022\uffe2\025\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\001\002\000\034\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\012\uffd9\014\uffd9\017\uffd9\020\uffd9\022\uffd9" +
    "\025\uffd9\036\uffd9\037\uffd9\040\uffd9\001\002\000\034\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\012\uffe1\014\uffe1\017\uffe1" +
    "\020\uffe1\022\uffe1\025\uffe1\036\uffe1\037\uffe1\040\uffe1\001" +
    "\002\000\034\004\uffdf\005\uffdf\006\uffdf\007\uffdf\012\uffdf" +
    "\014\uffdf\017\uffdf\020\uffdf\022\uffdf\025\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\001\002\000\034\004\037\005\035\006\040" +
    "\007\042\012\032\014\047\017\043\020\036\022\034\025" +
    "\045\036\031\037\033\040\041\001\002\000\034\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\012\uffdc\014\uffdc\017\uffdc\020" +
    "\uffdc\022\uffdc\025\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002" +
    "\000\034\004\uffe5\005\uffe5\006\uffe5\007\uffe5\012\uffe5\014" +
    "\uffe5\017\uffe5\020\uffe5\022\uffe5\025\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\001\002\000\006\005\uffe7\040\uffe7\001\002\000" +
    "\034\004\uffe6\005\uffe6\006\uffe6\007\uffe6\012\uffe6\014\uffe6" +
    "\017\uffe6\020\uffe6\022\uffe6\025\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\001\002\000\004\041\052\001\002\000\004\014\053" +
    "\001\002\000\006\005\uffd5\040\uffd5\001\002\000\004\040" +
    "\055\001\002\000\004\021\056\001\002\000\004\011\057" +
    "\001\002\000\006\036\066\037\060\001\002\000\012\013" +
    "\074\014\uffea\027\100\037\uffea\001\002\000\006\014\ufff3" +
    "\036\077\001\002\000\006\014\uffec\037\uffec\001\002\000" +
    "\004\014\075\001\002\000\006\014\ufff0\036\ufff0\001\002" +
    "\000\006\014\ufff2\037\072\001\002\000\012\013\067\014" +
    "\uffee\027\070\036\uffee\001\002\000\006\014\uffef\036\uffef" +
    "\001\002\000\004\036\071\001\002\000\004\014\ufff4\001" +
    "\002\000\010\013\074\014\uffea\037\uffea\001\002\000\006" +
    "\014\uffed\037\uffed\001\002\000\006\014\uffeb\037\uffeb\001" +
    "\002\000\006\005\ufff6\035\ufff6\001\002\000\006\014\ufff1" +
    "\036\ufff1\001\002\000\010\013\067\014\uffee\036\uffee\001" +
    "\002\000\004\037\101\001\002\000\004\014\ufff5\001\002" +
    "\000\006\005\ufff8\035\ufff8\001\002\000\004\015\051\001" +
    "\002\000\006\005\uffd7\040\uffd7\001\002\000\006\002\ufffd" +
    "\004\ufffd\001\002\000\004\002\001\001\002\000\006\002" +
    "\uffff\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\010\002\005\003\004\004\003\001\001\000" +
    "\002\001\001\000\004\004\106\001\001\000\002\001\001" +
    "\000\024\005\013\006\010\007\007\011\023\014\015\015" +
    "\022\016\012\017\011\024\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\103\001\001\000\004\006\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\045\023\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\063\013" +
    "\061\020\062\021\060\022\064\001\001\000\002\001\001" +
    "\000\004\012\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public String resultado = "";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_Sintactico$actions {

  
  private final A_Sintactico parser;

  /** Constructor */
  CUP$A_Sintactico$actions(A_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action_part00000000(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_Sintactico$parser.done_parsing();
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S A 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= A 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= LLAVE_A B LLAVE_C 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // B ::= definirconjuntos 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= definirexpresionregular 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // B ::= dobleporciento 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // B ::= comentarios 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definirconjuntos ::= definirconjuntos C 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirconjuntos",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definirconjuntos ::= C 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirconjuntos",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // C ::= CONJUNTO DOSPUNTOS ID MENOS MAYOR notacionconjuntos PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // notacionconjuntos ::= LETRA COSO_N LETRA 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",14, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // notacionconjuntos ::= DIGITO COSO_N DIGITO 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",14, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // notacionconjuntos ::= listanumeros 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",14, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // notacionconjuntos ::= listaletras 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",14, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listanumeros ::= listanumeros G 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("listanumeros",15, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listanumeros ::= G 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("listanumeros",15, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // G ::= DIGITO COMA 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // G ::= DIGITO 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("G",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listaletras ::= listaletras H 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("listaletras",16, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaletras ::= H 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("listaletras",16, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // H ::= LETRA COMA 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // H ::= LETRA 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // definirexpresionregular ::= definirexpresionregular D 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirexpresionregular",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // definirexpresionregular ::= D 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirexpresionregular",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // D ::= ID MENOS MAYOR er PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("D",5, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // er ::= er E 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("er",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // er ::= E 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("er",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= LLAVE_A 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= LLAVE_C 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= COMILLASIM 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= COMILLADOB 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= PUNTO 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= INTE_C 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= MAS 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= POR 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= OR 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= DIGITO 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= LETRA 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= ID 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dobleporciento ::= expresionregularaevaluar 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("dobleporciento",12, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresionregularaevaluar ::= expresionregularaevaluar F 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("expresionregularaevaluar",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresionregularaevaluar ::= F 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("expresionregularaevaluar",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // F ::= ID DOSPUNTOS CADENA PUNTOYCOMA 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comentarios ::= COMENTARIO_LINEA 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",13, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comentarios ::= COMENTARIO_VARIASL 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",13, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_Sintactico$do_action_part00000000(
                               CUP$A_Sintactico$act_num,
                               CUP$A_Sintactico$parser,
                               CUP$A_Sintactico$stack,
                               CUP$A_Sintactico$top);
    }
}

}
