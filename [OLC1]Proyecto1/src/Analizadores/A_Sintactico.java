
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import Proyecto1.Index;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\020\011\000\002\023\003\000\002" +
    "\023\003\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\021\007\000\002\024\004" +
    "\000\002\024\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\005\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\022\005" +
    "\000\002\022\003\000\002\025\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\004\004\007\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\006\002\000\004\007\001\002\000\004" +
    "\002\072\001\002\000\010\023\014\025\016\030\017\001" +
    "\002\000\012\005\ufffb\023\ufffb\025\ufffb\030\ufffb\001\002" +
    "\000\012\005\071\023\014\025\016\030\017\001\002\000" +
    "\012\005\ufff8\023\ufff8\025\ufff8\030\ufff8\001\002\000\012" +
    "\005\uffe1\023\uffe1\025\uffe1\030\uffe1\001\002\000\004\023" +
    "\065\001\002\000\012\005\ufffa\023\ufffa\025\ufffa\030\ufffa" +
    "\001\002\000\004\012\047\001\002\000\006\012\021\016" +
    "\022\001\002\000\012\005\ufff9\023\ufff9\025\ufff9\030\ufff9" +
    "\001\002\000\004\031\045\001\002\000\004\006\023\001" +
    "\002\000\020\004\030\007\025\014\032\015\027\017\026" +
    "\022\035\031\024\001\002\000\022\004\uffe6\007\uffe6\011" +
    "\uffe6\014\uffe6\015\uffe6\017\uffe6\022\uffe6\031\uffe6\001\002" +
    "\000\022\004\uffed\007\uffed\011\uffed\014\uffed\015\uffed\017" +
    "\uffed\022\uffed\031\uffed\001\002\000\022\004\uffeb\007\uffeb" +
    "\011\uffeb\014\uffeb\015\uffeb\017\uffeb\022\uffeb\031\uffeb\001" +
    "\002\000\022\004\uffec\007\uffec\011\uffec\014\uffec\015\uffec" +
    "\017\uffec\022\uffec\031\uffec\001\002\000\010\026\043\027" +
    "\040\030\041\001\002\000\022\004\uffe8\007\uffe8\011\uffe8" +
    "\014\uffe8\015\uffe8\017\uffe8\022\uffe8\031\uffe8\001\002\000" +
    "\022\004\uffe9\007\uffe9\011\uffe9\014\uffe9\015\uffe9\017\uffe9" +
    "\022\uffe9\031\uffe9\001\002\000\022\004\uffee\007\uffee\011" +
    "\uffee\014\uffee\015\uffee\017\uffee\022\uffee\031\uffee\001\002" +
    "\000\022\004\030\007\025\011\036\014\032\015\027\017" +
    "\026\022\035\031\024\001\002\000\022\004\uffea\007\uffea" +
    "\011\uffea\014\uffea\015\uffea\017\uffea\022\uffea\031\uffea\001" +
    "\002\000\012\005\ufff0\023\ufff0\025\ufff0\030\ufff0\001\002" +
    "\000\022\004\uffef\007\uffef\011\uffef\014\uffef\015\uffef\017" +
    "\uffef\022\uffef\031\uffef\001\002\000\004\005\uffe5\001\002" +
    "\000\004\005\uffe3\001\002\000\004\005\044\001\002\000" +
    "\004\005\uffe4\001\002\000\022\004\uffe7\007\uffe7\011\uffe7" +
    "\014\uffe7\015\uffe7\017\uffe7\022\uffe7\031\uffe7\001\002\000" +
    "\004\011\046\001\002\000\012\005\uffe0\023\uffe0\025\uffe0" +
    "\030\uffe0\001\002\000\004\030\050\001\002\000\004\016" +
    "\051\001\002\000\004\006\052\001\002\000\006\026\057" +
    "\030\053\001\002\000\004\011\ufff4\001\002\000\004\011" +
    "\064\001\002\000\010\010\060\011\ufff5\024\061\001\002" +
    "\000\004\011\ufff6\001\002\000\010\010\ufff1\011\ufff1\024" +
    "\ufff1\001\002\000\004\026\063\001\002\000\004\026\062" +
    "\001\002\000\010\010\ufff2\011\ufff2\024\ufff2\001\002\000" +
    "\010\010\ufff3\011\ufff3\024\ufff3\001\002\000\012\005\ufff7" +
    "\023\ufff7\025\ufff7\030\ufff7\001\002\000\004\030\066\001" +
    "\002\000\004\012\021\001\002\000\012\005\uffe2\023\uffe2" +
    "\025\uffe2\030\uffe2\001\002\000\012\005\ufffc\023\ufffc\025" +
    "\ufffc\030\ufffc\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\004\002\001\001\002\000\006\002\uffff\004\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\010\002\005\003\004\004\003\001\001\000" +
    "\002\001\001\000\004\004\072\001\001\000\002\001\001" +
    "\000\016\005\010\006\007\020\014\021\017\022\011\025" +
    "\012\001\001\000\002\001\001\000\014\006\067\020\014" +
    "\021\017\022\011\025\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\032\014\030\024\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\036\014\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\055\011\054\023\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        Index i = new Index();
        public String resultado = "";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_Sintactico$actions {

  
  private final A_Sintactico parser;

  /** Constructor */
  CUP$A_Sintactico$actions(A_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action_part00000000(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_Sintactico$parser.done_parsing();
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 parser.resultado=a; System.out.println(a); i.txt_salida.setText(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= A 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= LLAVE_A B LLAVE_C 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = " { "+b.toString()+" } "; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // B ::= B C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // B ::= C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("B",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // C ::= definirconjuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // C ::= definirexpresionregular 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // C ::= dobleporciento 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("C",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definirconjuntos ::= CONJUNTO DOSPUNTOS ID MENOS MAYOR notacionconjuntos PUNTOYCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString()+d.toString()+e.toString()+f.toString()+g.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirconjuntos",14, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // notacionconjuntos ::= E 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // notacionconjuntos ::= F 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("notacionconjuntos",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // F ::= F COMA DIGITO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // F ::= F COSO_N DIGITO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // F ::= DIGITO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // definirexpresionregular ::= ID MENOS MAYOR er PUNTOYCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString()+d.toString()+e.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("definirexpresionregular",15, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // er ::= er H 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("er",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // er ::= H 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("er",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // H ::= PUNTO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // H ::= MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // H ::= POR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // H ::= OR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // H ::= INTE_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // H ::= I 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("H",9, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // I ::= LLAVE_A J LLAVE_C 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = " { "+b.toString()+" } "; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // I ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("I",10, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // J ::= LETRA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // J ::= DIGITO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // J ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("J",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dobleporciento ::= DPORCIENTO DPORCIENTO expresionregularaevaluar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("dobleporciento",16, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dobleporciento ::= expresionregularaevaluar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("dobleporciento",16, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresionregularaevaluar ::= ID DOSPUNTOS CADENA PUNTOYCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString()+d.toString(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("expresionregularaevaluar",19, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_Sintactico$do_action_part00000000(
                               CUP$A_Sintactico$act_num,
                               CUP$A_Sintactico$parser,
                               CUP$A_Sintactico$stack,
                               CUP$A_Sintactico$top);
    }
}

}
